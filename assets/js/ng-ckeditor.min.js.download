'use strict';

(function (angular, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['angular', 'ckeditor'], function (angular) {
            return factory(angular);
        });
    } else {
        return factory(angular);
    }
}(angular || null, function (angular) {
    var app = angular.module('ngCkeditor', []);
    var $defer, loaded = false;

    app.run(['$q', '$timeout', function ($q, $timeout) {
        $defer = $q.defer();

        if (angular.isUndefined(CKEDITOR)) {
            throw new Error('CKEDITOR not found');
        }
        CKEDITOR.disableAutoInline = true;
        function checkLoaded() {
            if (CKEDITOR.status === 'loaded') {
                loaded = true;
                $defer.resolve();
            } else {
                checkLoaded();
            }
        }

        CKEDITOR.on('loaded', checkLoaded);
        $timeout(checkLoaded, 100);
    }]);

    // app.directive('ckeditor', ['$timeout', '$q', function ($timeout, $q) {

    //     return {
    //         restrict: 'AC',
    //         require: ['ngModel', '^?form'],
    //         scope: false,
    //         link: function (scope, element, attrs, ctrls) {
    //             var ngModel = ctrls[0];
    //             var form = ctrls[1] || null;
    //             var EMPTY_HTML = '<p></p>',
    //                 isTextarea = element[0].tagName.toLowerCase() === 'textarea',
    //                 data = [],
    //                 isReady = false;

    //             if (!isTextarea) {
    //                 element.attr('contenteditable', true);
    //             }

    //             var onLoad = function () {
    //                 var options = {
    //                     toolbar : 'full',
    //                     toolbar_full: [ //jshint ignore:line
    //                         {
    //                             name: 'basicstyles',
    //                             items: ['Bold', 'Italic', 'Underline','Copy','Paste']
    //                         },
    //                         {name: 'paragraph', items: ['BulletedList', 'NumberedList']},
    //                         {name: 'editing', items: ['JustifyLeft', 'JustifyCenter',  'JustifyBlock']}, //JustifyRight
    //                         {name: 'links', items: ['Link']}, //'Unlink', 'Anchor'
    //                         {name: 'insert', items: ['Image', 'Table']}, //'HorizontalRule','SpecialChar'
    //                         {name: 'colors', items: [ 'TextColor', 'BGColor' ] },
    //                         {name: 'clipboard', items: ['Undo', 'Redo']},
    //                         {name: 'styles', items: ['Styles','Format','Font','FontSize', 'PasteFromWord','Source']},
                           
    //                         // '/',
    //                         // {
    //                         //     name: 'styles',
    //                         //     items: ['Styles','Format','Font','FontSize',   'PasteFromWord'] //PasteText,'CopyFormatting', 'RemoveFormat'
    //                         // },
    //                         // {name: 'forms', items: ['Outdent', 'Indent']},
    //                         // {name: 'document', items: ['PageBreak']},
    //                         // {name: 'tools', items: ['SpellChecker']} //Maximize
    //                     ],
    //                     disableNativeSpellChecker: false,
    //                     uiColor: '#FAFAFA',
    //                     height: '400px',
    //                     width: '100%',

    //                 };
    //                 options = angular.extend(options, scope[attrs.ckeditor]);
    //                 var isPasteData = false;

    //                 var instance = (isTextarea) ? CKEDITOR.replace(element[0], options) : CKEDITOR.inline(element[0], options),
    //                     configLoaderDef = $q.defer();

    //                 var textareaName = (attrs['name'])?attrs['name']:'';
    //                 element.bind('$destroy', function () {
    //                     if (instance && CKEDITOR.instances[instance.name] && !textareaName.indexOf(".")) {
    //                         CKEDITOR.instances[instance.name].destroy();
    //                     }
    //                 });
    //                 var setModelData = function (setPristine) {

    //                     var data = instance.getData();
    //                     if (data === '') {
    //                         data = null;
    //                     }
    //                     $timeout(function () { // for key up event
    //                         if(isNotEmpty(data)) {
    //                             if( data.trim() === "<p>undefined</p>" || data.trim() === "<p>&nbsp;</p>")
    //                             {
    //                                 data = '';
    //                             }
    //                         }
                            
    //                         if(isNotEmpty(data) ) {
    //                             // console.log(data);
    //                             var html = data;
    //                             // var  check_word_data = html.match(/<img\s*.*?\s*src=\"((file):\/\/)\s*.*?\s*\" \s*.*>/gi);
    //                             var table_align_match_word = html.match(/<table\s*.*?\s*align=\"left\"\s*.*?\s*>/gmi);
    //                             if(table_align_match_word && isPasteData)
    //                             {
    //                                 table_align_match_word = table_align_match_word.toString();
    //                                 var table_align_match_word_obj = table_align_match_word.split(',');
    //                                 angular.forEach(table_align_match_word_obj,function(val,key){
    //                                     var match_table_align =  val;
    //                                     var match_table_align_replace = val.replace('align=\"left\"','');
    //                                     data = html.replace(match_table_align,match_table_align_replace);
    //                                     instance.setData(data);
    //                                 });
    //                                 isPasteData = false;
    //                             }
    //                         }

    //                         if (setPristine !== true || data !== ngModel.$viewValue) {
    //                             ngModel.$setViewValue(data);
    //                         }

    //                         // console.log(data);

    //                         if (setPristine === true && form) {
    //                             form.$setPristine();
    //                         }

    //                     }, 0);
    //                 }, onUpdateModelData = function (setPristine) {
    //                     if (!data.length) {
    //                         return;
    //                     }

    //                     var item = data.pop() || EMPTY_HTML;
    //                     isReady = false;
    //                     instance.setData(item, function () {

    //                         setModelData(setPristine);
    //                         isReady = true;
    //                     });
    //                 };

    //                 instance.on('pasteState',   setModelData);
    //                 instance.on('change', setModelData);
    //                 instance.on('blur', setModelData);
    //                 //instance.on('key',          setModelData); // for source view
                    
    //                 instance.on('instanceReady', function (e) {
    //                     scope.$broadcast('ckeditor.ready');

    //                     scope.$apply(function () {
    //                         onUpdateModelData(true);
    //                     });

    //                     instance.document.on('keyup', setModelData);

    //                     instance.document.on( 'paste', function(e) {
    //                         isPasteData = true;
    //                         // var data = instance.getData();

    //                         // console.log(data);
    //                     }); 
    //                     // ck.editor.pasteFilter.disallow('table');
                        
    //                     // console.log('ck instance');

    //                       // disallowedContent: 'script; *[on*]'

    //                 });
    //                 instance.on('customConfigLoaded', function () {
    //                     configLoaderDef.resolve();
    //                 });

    //                 ngModel.$render = function () {
    //                     data.push(ngModel.$viewValue);
    //                     if (isReady) {
    //                         onUpdateModelData();
    //                     }
    //                 };
    //             };

    //             if (CKEDITOR.status === 'loaded') {
    //                 loaded = true;
    //             }
    //             if (loaded) {
    //                 onLoad();
    //             } else {
    //                 $defer.promise.then(onLoad);
    //             }
    //         }
    //     };
    // }]);

    app.directive('ckeditor', ['$timeout', '$q', function ($timeout, $q) {

        return {
            restrict: 'AC',
            require: ['ngModel', '^?form'],
            scope: false,
            link: function (scope, element, attrs, ctrls) {
                var ngModel = ctrls[0];
                var form = ctrls[1] || null;
                var EMPTY_HTML = '<p></p>',
                    isTextarea = element[0].tagName.toLowerCase() === 'textarea',
                    data = [],
                    isReady = false;

                if (!isTextarea) {
                    element.attr('contenteditable', true);
                }


                var snippetslist = (attrs['snippetslist'])?attrs['snippetslist']:'';
                var snippetsList = (snippetslist && scope[snippetslist])?scope[snippetslist]:[];
                var showSnippets = (scope['showSnippets'])?scope['showSnippets']:false;
                console.log(snippetslist, showSnippets, snippetsList);
                if(showSnippets) {
                    if(!CKEDITOR.plugins.get('snippets')) {
                        CKEDITOR.plugins.add('snippets',
                        {   
                            requires : ['richcombo'], //, 'styles' ],
                            init : function( editor )
                            {
                                console.log(editor);
                                var config = editor.config,
                                lang = editor.lang.format;
                        
                                // Gets the list of tags from the settings.
                                //var snippetsList = snippetsList; //new Array();
                                //this.add('value', 'drop_text', 'drop_label');
                                
                                
                                // Create style objects for all defined styles.
                                editor.ui.addRichCombo('Snippets',
                                {
                                    label : "Snipppet",
                                    title :"Select Snipppet",
                                    voiceLabel : "Snipppet",
                                    className : 'cke_format cke_snippet',
                                    multiSelect : false,
                                    panel :
                                    {
                                    css : [ config.contentsCss, CKEDITOR.skin.getPath('editor') ],
                                    voiceLabel : lang.panelVoiceLabel,
                                    },
                    
                                    init : function()
                                    {
                                        //this.startGroup( "Snippets" );
                                        //this.add('value', 'drop_text', 'drop_label');
                                        for (var snippet_key in snippetsList){
                                            var body_text = snippetsList[snippet_key]['body'].replace(/(\r\n|\n|\r)/gm, "");
                                            this.add(body_text, snippetsList[snippet_key]['name'], snippetsList[snippet_key]['name']);
                                        }
                                    },
                    
                                    onClick : function( value )
                                    {         
                                        editor.focus();
                                        editor.fire( 'saveSnapshot' );
                                        editor.insertHtml(value);
                                        editor.fire( 'saveSnapshot' );
                                    }
                                });
                            }
                        });
                    }
                }
                
                var onLoad = function () {
                    var styles_list = ['Styles','Format','Font','FontSize', 'PasteFromWord','Source'];
                    var extraPlugins = 'uploadimage,font,contextmenu,dialog,colorbutton,justify,copyformatting,maximize,sourcearea,table,tabletools,tableresize,tableselection,colordialog,tableresizerowandcolumn';
                    if(showSnippets) {
                        styles_list.push('Snippets');
                        //styles_list = ['Styles','Format','Font','FontSize', 'PasteFromWord','Source',];    
                        extraPlugins += ',snippets';
                    }
                    console.log(styles_list, extraPlugins);
                    var options = {
                        toolbar : 'full',
                        toolbar_full: [ //jshint ignore:line
                            {
                                name: 'basicstyles',
                                items: ['Bold', 'Italic', 'Underline','Copy','Paste']
                            },
                            {name: 'paragraph', items: ['BulletedList', 'NumberedList']},
                            {name: 'editing', items: ['JustifyLeft', 'JustifyCenter',  'JustifyBlock','JustifyRight']}, //JustifyRight
                            {name: 'links', items: ['Link']}, //'Unlink', 'Anchor'
                            {name: 'insert', items: ['Image', 'Table']}, //'HorizontalRule','SpecialChar'
                            {name: 'colors', items: [ 'TextColor', 'BGColor' ] },
                            {name: 'clipboard', items: ['Undo', 'Redo']},
                            {name: 'styles', items: styles_list},
                           
                            // '/',
                            // {
                            //     name: 'styles',
                            //     items: ['Styles','Format','Font','FontSize',   'PasteFromWord'] //PasteText,'CopyFormatting', 'RemoveFormat'
                            // },
                            // {name: 'forms', items: ['Outdent', 'Indent']},
                            // {name: 'document', items: ['PageBreak']},
                            // {name: 'tools', items: ['SpellChecker']} //Maximize
                        ],
                        disableNativeSpellChecker: false,
                        uiColor: '#FAFAFA',
                        height: '400px',
                        width: '100%',
                        extraPlugins: extraPlugins,
                    };
                    
                    options = angular.extend(options, scope[attrs.ckeditor]);
                    var isPasteData = false;

                    var instance = (isTextarea) ? CKEDITOR.replace(element[0], options) : CKEDITOR.inline(element[0], options),
                        configLoaderDef = $q.defer();

                    var textareaName = (attrs['name'])?attrs['name']:'';
                    element.bind('$destroy', function () {
                        if (instance && CKEDITOR.instances[instance.name] && !textareaName.indexOf(".")) {
                            CKEDITOR.instances[instance.name].destroy();
                        }
                    });
                    var setModelData = function (setPristine) {

                        var data = instance.getData();
                        if (data === '') {
                            data = null;
                        }
                        $timeout(function () { // for key up event
                            if(isNotEmpty(data)) {
                                if( data.trim() === "<p>undefined</p>" || data.trim() === "<p>&nbsp;</p>")
                                {
                                    data = '';
                                }
                            }
                            
                            if(isNotEmpty(data) ) {
                                // console.log(data);
                                var html = data;
                                // var  check_word_data = html.match(/<img\s*.*?\s*src=\"((file):\/\/)\s*.*?\s*\" \s*.*>/gi);
                                var table_align_match_word = html.match(/<table\s*.*?\s*align=\"left\"\s*.*?\s*>/gmi);
                                if(table_align_match_word && isPasteData)
                                {
                                    table_align_match_word = table_align_match_word.toString();
                                    var table_align_match_word_obj = table_align_match_word.split(',');
                                    angular.forEach(table_align_match_word_obj,function(val,key){
                                        var match_table_align =  val;
                                        var match_table_align_replace = val.replace('align=\"left\"','');
                                        data = html.replace(match_table_align,match_table_align_replace);
                                        instance.setData(data);
                                    });
                                    isPasteData = false;
                                }
                            }

                            if (setPristine !== true || data !== ngModel.$viewValue) {
                                ngModel.$setViewValue(data);
                            }

                            // console.log(data);

                            if (setPristine === true && form) {
                                form.$setPristine();
                            }

                        }, 0);
                    }, onUpdateModelData = function (setPristine) {
                        if (!data.length) {
                            return;
                        }

                        var item = data.pop() || EMPTY_HTML;
                        isReady = false;
                        instance.setData(item, function () {

                            setModelData(setPristine);
                            isReady = true;
                        });
                    };

                    instance.on('pasteState',   setModelData);
                    instance.on('change', setModelData);
                    instance.on('blur', setModelData);
                    //instance.on('key',          setModelData); // for source view
                    
                    instance.on('instanceReady', function (e) {
                        scope.$broadcast('ckeditor.ready');

                        scope.$apply(function () {
                            onUpdateModelData(true);
                        });

                        instance.document.on('keyup', setModelData);

                        instance.document.on( 'paste', function(e) {
                            isPasteData = true;
                            // var data = instance.getData();

                            // console.log(data);
                        }); 
                        // ck.editor.pasteFilter.disallow('table');
                        
                        // console.log('ck instance');

                          // disallowedContent: 'script; *[on*]'

                    });
                    instance.on('customConfigLoaded', function () {
                        configLoaderDef.resolve();
                    });

                    ngModel.$render = function () {
                        data.push(ngModel.$viewValue);
                        if (isReady) {
                            onUpdateModelData();
                        }
                    };
                };

                if (CKEDITOR.status === 'loaded') {
                    loaded = true;
                }
                if (loaded) {
                    onLoad();
                } else {
                    $defer.promise.then(onLoad);
                }
            }
        };
    }]);

    return app;
}));